apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: assessment-service-ingress
  namespace: default
  labels:
    app: assessment-service
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"

    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-rps: "100"
    nginx.ingress.kubernetes.io/rate-limit-connections: "50"

    # Request size limits
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/client-max-body-size: "10m"

    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"

    # CORS headers
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"

    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Certificate management with cert-manager
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

    # AWS ALB annotations (alternative to NGINX)
    # kubernetes.io/ingress.class: "alb"
    # alb.ingress.kubernetes.io/scheme: internet-facing
    # alb.ingress.kubernetes.io/target-type: ip
    # alb.ingress.kubernetes.io/healthcheck-path: /health
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    # alb.ingress.kubernetes.io/ssl-redirect: '443'

spec:
  tls:
  - hosts:
    - assessment.example.com
    - api.assessment.example.com
    secretName: assessment-service-tls

  rules:
  # Main domain
  - host: assessment.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: assessment-service
            port:
              number: 80

  # API subdomain
  - host: api.assessment.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: assessment-service
            port:
              number: 80

---
# Alternative Ingress for different environments
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: assessment-service-staging
  namespace: default
  labels:
    app: assessment-service
    environment: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
spec:
  tls:
  - hosts:
    - staging.assessment.example.com
    secretName: assessment-service-staging-tls

  rules:
  - host: staging.assessment.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: assessment-service
            port:
              number: 80

---
# Ingress for internal access (development)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: assessment-service-internal
  namespace: default
  labels:
    app: assessment-service
    environment: development
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: assessment.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: assessment-service
            port:
              number: 80